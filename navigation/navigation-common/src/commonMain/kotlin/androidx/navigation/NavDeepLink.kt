/*
 * Copyright 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package androidx.navigation

import androidx.annotation.RestrictTo
import kotlin.jvm.JvmStatic
import kotlin.reflect.KClass
import kotlin.reflect.KType

/**
 * NavDeepLink encapsulates the parsing and matching of a navigation deep link.
 *
 * This should be added to a [NavDestination] using
 * [NavDestination.addDeepLink].
 */
public expect class NavDeepLink internal constructor(
    uriPattern: String?, action: String?, mimeType: String?
) {
    /**
     * The uri pattern from the NavDeepLink.
     */
    public val uriPattern: String?

    /**
     * The action from the NavDeepLink.
     */
    public val action: String?

    /**
     * The mimeType from the NavDeepLink.
     */
    public val mimeType: String?

    public var isExactDeepLink: Boolean
        @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) get
        internal set

    @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
    public constructor(uri: String)

    /** A builder for constructing [NavDeepLink] instances. */
    public class Builder {

        @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
        public constructor()

        /**
         * Set the uri pattern for the [NavDeepLink].
         *
         * @param uriPattern The uri pattern to add to the NavDeepLink
         * @return This builder.
         */
        public fun setUriPattern(uriPattern: String): Builder

        /**
         * Set the uri pattern for the [NavDeepLink].
         *
         * Arguments extracted from destination [T] will be automatically appended to the base path
         * provided in [basePath].
         *
         * Arguments are appended based on property name and in the same order as their declaration
         * order in [T]. They are appended as query parameters if the argument has either:
         * 1. a default value
         * 2. a [NavType] of [CollectionNavType]
         *
         * Otherwise, the argument will be appended as path parameters. The final uriPattern is
         * generated by concatenating `uriPattern + path parameters + query parameters`.
         *
         * For example, the `name` property in this class does not meet either conditions and will
         * be appended as a path param.
         *
         * ```
         * @Serializable
         * class MyClass(val name: String)
         * ```
         *
         * Given a uriPattern of "www.example.com", the generated final uriPattern will be
         * `www.example.com/{name}`.
         *
         * The `name` property in this class has a default value and will be appended as a query.
         *
         * ```
         * @Serializable
         * class MyClass(val name: String = "default")
         * ```
         *
         * Given a uriPattern of "www.example.com", the final generated uriPattern will be
         * `www.example.com?name={name}`
         *
         * The append order is based on their declaration order in [T]
         *
         * ```
         * @Serializable
         * class MyClass(val name: String = "default", val id: Int, val code: Int)
         * ```
         *
         * Given a uriPattern of "www.example.com", the final generated uriPattern will be
         * `www.example.com/{id}/{code}?name={name}`. In this example, `name` is appended first as a
         * query param, then `id` and `code` respectively as path params. The final pattern is then
         * concatenated with `uriPattern + path + query`.
         *
         * @param T The destination's route from KClass
         * @param basePath The base uri path to append arguments onto
         * @param typeMap map of destination arguments' kotlin type [KType] to its respective custom
         *   [NavType]. May be empty if [T] does not use custom NavTypes.
         * @return This builder.
         */
        public inline fun <reified T : Any> setUriPattern(
            basePath: String,
            typeMap: Map<KType, NavType<*>> = emptyMap(),
        ): Builder

        @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) // need to be public for reified delegation
        public fun <T : Any> setUriPattern(
            basePath: String,
            route: KClass<T>,
            typeMap: Map<KType, NavType<*>> = emptyMap(),
        ): Builder

        /**
         * Set the action for the [NavDeepLink].
         *
         * @param action the intent action for the NavDeepLink
         * @return This builder.
         * @throws IllegalArgumentException if the action is empty.
         */
        public fun setAction(action: String): Builder

        /**
         * Set the mimeType for the [NavDeepLink].
         *
         * @param mimeType the mimeType for the NavDeepLink
         * @return This builder.
         */
        public fun setMimeType(mimeType: String): Builder

        /**
         * Build the [NavDeepLink] specified by this builder.
         *
         * @return the newly constructed NavDeepLink.
         */
        public fun build(): NavDeepLink

        internal companion object {
            /**
             * Creates a [NavDeepLink.Builder] with a set uri pattern.
             *
             * @param uriPattern The uri pattern to add to the NavDeepLink
             * @return a [Builder] instance
             */
            @JvmStatic
            fun fromUriPattern(uriPattern: String): Builder

            /**
             * Creates a [NavDeepLink.Builder] with a set uri pattern.
             *
             * Arguments extracted from destination [T] will be automatically appended to the base
             * path provided in [basePath]
             *
             * @param T The destination's route from KClass
             * @param basePath The base uri path to append arguments onto
             * @param typeMap map of destination arguments' kotlin type [KType] to its respective
             *   custom [NavType]. May be empty if [T] does not use custom NavTypes.
             * @return a [Builder] instance
             */
            @JvmStatic
            inline fun <reified T : Any> fromUriPattern(
                basePath: String,
                typeMap: Map<KType, NavType<*>> = emptyMap(),
            ): Builder

            /**
             * Creates a [NavDeepLink.Builder] with a set action.
             *
             * @param action the intent action for the NavDeepLink
             * @return a [Builder] instance
             * @throws IllegalArgumentException if the action is empty.
             */
            @JvmStatic
            fun fromAction(action: String): Builder

            /**
             * Creates a [NavDeepLink.Builder] with a set mimeType.
             *
             * @param mimeType the mimeType for the NavDeepLink
             * @return a [Builder] instance
             */
            @JvmStatic
            fun fromMimeType(mimeType: String): Builder
        }
    }
}
